 .data
A : .space 40
BevenA : .space 40
CoddD : .space 40



newline:.asciiz "\n"
space: .asciiz"  "

msg1:.asciiz "Please enter 10 between 0-999 int "
msg2: .asciiz "Count of odd numbers = "
msg3: .asciiz "Count of Negative numbers = "
msg4: .asciiz "Array A = "
FinalMsg:  .asciiz "Faiza Batta  "


counter: .word 0
counterOdd: .word 0
co: .word 0
counterEven: .word 0
ce: .word 0
sum: .word 0
avg: .word 0 
.text

main:
     la $s0,A
     la $s1,BevenA
     la $s2,CoddD
     lw $t2,counter
     
     li $t9,0 #BevenA
     li $t8,0 #CoddD
     lw $t4,counterEven
     lw $t5,counterOdd
     addi $t0,$t0,40
Read: 
    # beq $s0,$t0,sort #read 16 int t0=64
      li $t3,2 #div
      beq $t2,10,PR #read 16
      
     li $v0,4
     la $a0,msg1
     syscall
     
     li $v0,4
     la $a0,newline
     syscall
     
     li $v0,5
     syscall
     
     bltz $v0,Read #roles
     bgt  $v0,999,Read
     
     cont:
     
     sw $v0,($s0)
     addi $s0,$s0,4  # $s0 index for array
     addi $t2,$t2,1
     
     div $v0,$t3
     mfhi $t7
     
     bnez $t7,odd
     
     sw $v0,($s1) #even
     addi $t9,$t9,1 #countereven
     j Read #else keep Reading
          
  
odd:
     sw $v0,($s2) #odd
     addi $t8,$t8,1 #counterOdd
      j Read
   ## odd numbers
   
   PR:
     
     li $v0,4
     la $a0,msg2
     syscall
     
     move $a0,$t5 #Odd count
     li $v0,1 
     syscall
     
     li $v0,4
     la $a0,newline
     syscall  
     #even
     li $v0,4
     la $a0,msg3
     syscall
     
     move $a0,$t9 #even count
     li $v0,1 
     syscall
     
     li $v0,4
     la $a0,newline
     syscall 
     #num printed
     
     
     #dec order for C
   move $t1,$zero  #array(x)                       
   move $t2,$zero 
   addi $t2,$t2,4 #array(x+1)

   rs:
  addi $t1,$t1,4
  addi $t2,$t1,0
  
loop:       
            beq $t1,40,asOrd
            lw $s5,CoddD($t1)
            lw $s6,CoddD($t2)

            blt $s5, $s6, swap     
            beq $s2,40,rs
            addi $s2,$s2,4
            j   loop                  # jump back to loop so we can compare next two elements

swap:       sw $s5,CoddD($t2)
            sw $s6,CoddD($t1)        
            beq $t2,40,rs
            addi $t2,$t2,4
            j   loop 
            #done for C
            
            #asc order for B
asOrd:
            
   move $t1,$zero  #array(x)                       
   move $t2,$zero 
   addi $t2,$t2,4 #array(x+1)

   rs1:
  addi $t1,$t1,4
  addi $t2,$t1,0
  
loop1:       
            beq $t1,40,printing
            lw $s5,CoddD($t1)
            lw $s6,CoddD($t2)

            bgt  $s5, $s6, swap1    
            beq $t2,40,rs1
            addi $t2,$t2,4
            j   loop1                  # jump back to loop so we can compare next two elements

swap1:       sw $s5,CoddD($t2)
            sw $s6,CoddD($t1)        
            beq $t2,40,rs1
            addi $t2,$t2,4
            j   loop1  
     
     
     printing:
     li $v0,4
     la $a0,FinalMsg
     syscall
     
     li $v0,4
     la $a0,newline
     syscall
     #print arrays
                la $a0,msg4
                syscall
                li $v0,4
                la $a0,newline
                syscall
     
                la $s0,A #done to print A
                li $s1,0
                li $t6,10
                print11:
                beq $s1,$t6,nxtArrEv
                beq $s1,$t4,nxtArrodd
                beq $s1,$t5,mean
                lw $a0,($s0)
                li $v0,1 
                syscall
                
                la $a0,space
                li $v0,4
                syscall
                
                addi $s0,$s0,4
                addi $s1,$s1,1
                b print11
      
     
    nxtArrEv:
    li $v0,4
    la $a0,newline
    syscall
    la $s0,BevenA #done to print B
    li $s1,0
    #move ce,$t4
    move $t6,$t4
    j print11
    
    nxtArrodd:
    li $v0,4
    la $a0,newline
    syscall
    la $s0,CoddD #done to print C
    li $s1,0
    #lw co,$t4
    move $t6,$t4
    j print11
    
